{"version":3,"sources":["vendor/lodash/modularize/_toKey.js"],"names":["INFINITY","toKey","value","result"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACA,IAAIA,WAAW,IAAI,CAAnB;;AAEA;;;;;;;AAOA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,MAAI,OAAOA,KAAP,IAAgB,QAAhB,IAA4B,wBAASA,KAAT,CAAhC,EAAiD;AAC/C,WAAOA,KAAP;AACD;AACD,MAAIC,SAAUD,QAAQ,EAAtB;AACA,SAAQC,UAAU,GAAV,IAAkB,IAAID,KAAL,IAAe,CAACF,QAAlC,GAA8C,IAA9C,GAAqDG,MAA5D;AACD;;kBAEcF,K","file":"vendor/lodash/modularize/_toKey.js","sourcesContent":["import isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default toKey;\n"],"sourceRoot":"../../../../../../src/js"}