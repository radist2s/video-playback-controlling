{"version":3,"sources":["common/object-fit.ts"],"names":[],"mappings":"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","file":"common/object-fit.js","sourcesContent":["/**\n * Usage:\n *\n this.once('hasLayout', function () {\n        var screenBgImageNode = this.el.querySelector('.screenBgImage')\n\n        this.bgObjectFit = new ObjectFit(screenBgImageNode)\n\n        this.bgObjectFit.ready(this.bgObjectFit.fit.bind(this))\n    })\n\n this.listenTo(this.model, 'change:viewSize', function () {\n        if (!this.bgObjectFit) {\n            return\n        }\n\n        this.bgObjectFit.ready(this.bgObjectFit.fit.bind(this))\n    })\n */\nimport {Promise} from 'es6-promise'\n\ndeclare interface ObjectFitHTMLElement extends HTMLElement {\n    width: number\n    height: number\n}\n\nfunction isAlreadyLoaded(node) {\n    if (node.tagName.toLocaleLowerCase() === 'svg') {\n        return true\n    }\n\n    if (node.complete !== undefined && !node.complete) {\n        return false\n    }\n\n    if (node.readyState !== undefined) {\n        return node.readyState > node.HAVE_NOTHING\n    }\n\n    return !!node.naturalWidth\n}\n\nclass ObjectFit {\n    node: HTMLElement | HTMLVideoElement\n\n    protected isImg: boolean\n    protected isDiv: boolean\n    protected isIframe: boolean\n    protected isSvg: boolean\n    protected objectFitNode: HTMLElement\n    protected loadedPromise: Promise<Function>\n    protected nodeWidth: number\n    protected nodeHeight: number\n    protected nodeAspectRatio: number\n    public fit: () => void\n    public className: string\n    \n    static objectFitSupported\n\n    static nativeSupport() {\n        if (ObjectFit.objectFitSupported !== undefined) {\n            return ObjectFit.objectFitSupported\n        }\n\n        const detector = document.createElement('div');\n        const styleProps = ['-o-object-fit', 'object-fit'];\n\n        return ObjectFit.objectFitSupported = styleProps.some(function (prop) {\n            return detector.style[prop] !== undefined\n        })\n    }\n\n    constructor(node, objectFitNode?: HTMLElement) {\n        this.node = node\n\n        if (node === undefined || !(node instanceof HTMLElement || node instanceof SVGElement)) {\n            throw new Error('Only Nodes allowed')\n        }\n\n        switch (node.tagName.toLowerCase()) {\n            case 'img':\n            // case 'picture':\n                this.isImg = true\n                break\n            case 'video':\n                this.isImg = false\n                break\n            case 'svg':\n                this.isSvg = true;\n                break;\n            case 'iframe':\n                this.isIframe = true\n                break;\n            case 'div':\n                this.isDiv = true\n                break;\n            default:\n                throw new Error('Only images or Video allowed')\n        }\n\n        this.render(objectFitNode)\n\n        this.loadedPromise = new Promise(done => {\n            if (this.isIframe || this.isSvg || this.isDiv) {\n                return done()\n            }\n\n            if (isAlreadyLoaded(this.node)) {\n                return done()\n            }\n\n            const loadedEvent = this.isImg ? 'load' : 'loadedmetadata'\n            let onLoadCallback\n\n            this.node.addEventListener(loadedEvent, onLoadCallback = () => {\n                this.node.removeEventListener(loadedEvent, onLoadCallback)\n\n                done()\n            })\n        })\n\n        this.loadedPromise.then(this.initSizes.bind(this))\n\n        this.fit = this.loadedPromise.then.bind(this.loadedPromise, this._fit.bind(this))\n    }\n\n    protected render(objectFitNode: HTMLElement | null) {\n        this.objectFitNode = objectFitNode\n        \n        if (this.objectFitNode && this.objectFitNode instanceof HTMLElement) {\n            this.objectFitNode = objectFitNode\n        }\n        else {\n            this.objectFitNode = document.createElement('object-fit')\n        }\n        \n        objectFitNode.className = this.className\n        objectFitNode.style.display = 'block'\n        objectFitNode.style.overflow = 'hidden'\n\n        if (!objectFitNode.parentNode) {\n            objectFitNode.appendChild(this.node.parentNode.replaceChild(objectFitNode, this.node))\n        }\n    }\n\n    initSizes() {\n        const node = this.node\n        \n        let nodeComputedWidth,\n            nodeComputedHeight,\n            computedStyles;\n\n        if (this.isSvg) {\n            computedStyles = getComputedStyle(node)\n\n            nodeComputedWidth = parseInt(computedStyles.width)\n            nodeComputedHeight = parseInt(computedStyles.height)\n\n            nodeComputedWidth = isFinite(nodeComputedWidth) ? nodeComputedWidth : 0\n            nodeComputedHeight = isFinite(nodeComputedHeight) ? nodeComputedHeight : 0\n\n            this.nodeWidth = nodeComputedWidth\n            this.nodeHeight = nodeComputedHeight\n        }\n\n        if (this.isDiv) {\n            computedStyles = getComputedStyle(node)\n\n            nodeComputedWidth = parseInt(computedStyles.width)\n            nodeComputedHeight = parseInt(computedStyles.height)\n\n            nodeComputedWidth = isFinite(nodeComputedWidth) ? nodeComputedWidth : 0\n            nodeComputedHeight = isFinite(nodeComputedHeight) ? nodeComputedHeight : 0\n\n            this.nodeWidth = nodeComputedWidth\n            this.nodeHeight = nodeComputedHeight\n        }\n        \n        if (node instanceof HTMLVideoElement) {\n            this.nodeWidth = node.videoWidth || node.width || 0\n            this.nodeHeight = node.videoHeight || node.height || 0\n        }\n        else if (node instanceof HTMLImageElement) {\n            this.nodeWidth = node.naturalWidth || node.width || 0\n            this.nodeHeight = node.naturalHeight || node.width || 0\n        }\n        else {\n            let nodeWidth = node.getAttribute('width'),\n                nodeHeight = node.getAttribute('height')\n\n            this.nodeWidth = this.nodeWidth || (nodeWidth && parseInt(nodeWidth)) || 0\n            this.nodeHeight = this.nodeHeight || (nodeHeight && parseInt(nodeHeight)) || 0\n        }\n        \n        this.nodeAspectRatio = this.nodeWidth / this.nodeHeight\n    }\n\n    public ready(callback) {\n        this.loadedPromise.then(callback.bind(this))\n\n        return this\n    }\n\n    protected _fit() {\n        const sourceAspectRatio = this.nodeAspectRatio,\n            desiredWidth = this.objectFitNode.clientWidth,\n            desiredHeight = this.objectFitNode.clientHeight;\n\n        let desiredCropHeight = 0,\n            desiredCropWidth = 0;\n        const desiredAspectRatio = desiredWidth / desiredHeight;\n\n        if (sourceAspectRatio > desiredAspectRatio) {\n            desiredCropWidth = Math.floor(desiredHeight * sourceAspectRatio)\n            desiredCropHeight = desiredHeight\n        }\n        else {\n            desiredCropWidth = desiredWidth\n            desiredCropHeight = Math.floor(desiredWidth / sourceAspectRatio)\n        }\n\n        if (!isFinite(desiredCropWidth) || !isFinite(desiredCropHeight)) {\n            return\n        }\n\n        const node = this.node\n        \n        let cropOffsetLeft = Math.floor((desiredCropWidth - desiredWidth) / 2),\n            cropOffsetTop = Math.floor((desiredCropHeight - desiredHeight) / 2)\n\n        node.style.width = desiredCropWidth + 'px'\n        node.style.height = desiredCropHeight + 'px'\n        node.style.left = -cropOffsetLeft + 'px'\n        node.style.top = -cropOffsetTop + 'px'\n    }\n}\n\nObjectFit.prototype.className = 'object-fit'\n\nexport default ObjectFit"],"sourceRoot":"../../../../src/ts"}