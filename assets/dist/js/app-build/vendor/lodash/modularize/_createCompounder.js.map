{"version":3,"sources":["vendor/lodash/modularize/_createCompounder.js"],"names":["rsApos","reApos","RegExp","createCompounder","callback","string","replace"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAIA,SAAS,YAAb;;AAEA;AACA,IAAIC,SAASC,OAAOF,MAAP,EAAe,GAAf,CAAb;;AAEA;;;;;;;AAOA,SAASG,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,SAAO,UAASC,MAAT,EAAiB;AACtB,WAAO,2BAAY,qBAAM,sBAAOA,MAAP,EAAeC,OAAf,CAAuBL,MAAvB,EAA+B,EAA/B,CAAN,CAAZ,EAAuDG,QAAvD,EAAiE,EAAjE,CAAP;AACD,GAFD;AAGD;;kBAEcD,gB","file":"vendor/lodash/modularize/_createCompounder.js","sourcesContent":["import arrayReduce from './_arrayReduce.js';\nimport deburr from './deburr.js';\nimport words from './words.js';\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\";\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\nexport default createCompounder;\n"],"sourceRoot":"../../../../../../src/js"}