{"version":3,"sources":["vendor/lodash/modularize/_isIndex.js"],"names":["MAX_SAFE_INTEGER","reIsUint","isIndex","value","length","test"],"mappings":";;;;;AAAA;AACA,IAAIA,mBAAmB,gBAAvB;;AAEA;AACA,IAAIC,WAAW,kBAAf;;AAEA;;;;;;;;AAQA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9BA,WAASA,UAAU,IAAV,GAAiBJ,gBAAjB,GAAoCI,MAA7C;AACA,SAAO,CAAC,CAACA,MAAF,KACJ,OAAOD,KAAP,IAAgB,QAAhB,IAA4BF,SAASI,IAAT,CAAcF,KAAd,CADxB,KAEJA,QAAQ,CAAC,CAAT,IAAcA,QAAQ,CAAR,IAAa,CAA3B,IAAgCA,QAAQC,MAF3C;AAGD;;kBAEcF,O","file":"vendor/lodash/modularize/_isIndex.js","sourcesContent":["/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\nexport default isIndex;\n"],"sourceRoot":"../../../../../../src/js"}