{"version":3,"sources":["vendor/lodash/modularize/_isLaziable.js"],"names":["isLaziable","func","funcName","other","lodash","LazyWrapper","prototype","data"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;AAQA,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AACxB,MAAIC,WAAW,2BAAYD,IAAZ,CAAf;AAAA,MACIE,QAAQC,wBAAOF,QAAP,CADZ;;AAGA,MAAI,OAAOC,KAAP,IAAgB,UAAhB,IAA8B,EAAED,YAAYG,sBAAYC,SAA1B,CAAlC,EAAwE;AACtE,WAAO,KAAP;AACD;AACD,MAAIL,SAASE,KAAb,EAAoB;AAClB,WAAO,IAAP;AACD;AACD,MAAII,OAAO,uBAAQJ,KAAR,CAAX;AACA,SAAO,CAAC,CAACI,IAAF,IAAUN,SAASM,KAAK,CAAL,CAA1B;AACD;;kBAEcP,U","file":"vendor/lodash/modularize/_isLaziable.js","sourcesContent":["import LazyWrapper from './_LazyWrapper.js';\nimport getData from './_getData.js';\nimport getFuncName from './_getFuncName.js';\nimport lodash from './wrapperLodash.js';\n\n/**\n * Checks if `func` has a lazy counterpart.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n *  else `false`.\n */\nfunction isLaziable(func) {\n  var funcName = getFuncName(func),\n      other = lodash[funcName];\n\n  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n    return false;\n  }\n  if (func === other) {\n    return true;\n  }\n  var data = getData(other);\n  return !!data && func === data[0];\n}\n\nexport default isLaziable;\n"],"sourceRoot":"../../../../../../src/js"}