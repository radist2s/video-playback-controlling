{"version":3,"sources":["vendor/lodash/modularize/_baseMergeDeep.js"],"names":["baseMergeDeep","object","source","key","srcIndex","mergeFunc","customizer","stack","objValue","srcValue","stacked","get","newValue","undefined","isCommon","isArr","isBuff","isTyped","set"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;AAeA,SAASA,aAAT,CAAuBC,MAAvB,EAA+BC,MAA/B,EAAuCC,GAAvC,EAA4CC,QAA5C,EAAsDC,SAAtD,EAAiEC,UAAjE,EAA6EC,KAA7E,EAAoF;AAClF,MAAIC,WAAWP,OAAOE,GAAP,CAAf;AAAA,MACIM,WAAWP,OAAOC,GAAP,CADf;AAAA,MAEIO,UAAUH,MAAMI,GAAN,CAAUF,QAAV,CAFd;;AAIA,MAAIC,OAAJ,EAAa;AACX,oCAAiBT,MAAjB,EAAyBE,GAAzB,EAA8BO,OAA9B;AACA;AACD;AACD,MAAIE,WAAWN,aACXA,WAAWE,QAAX,EAAqBC,QAArB,EAAgCN,MAAM,EAAtC,EAA2CF,MAA3C,EAAmDC,MAAnD,EAA2DK,KAA3D,CADW,GAEXM,SAFJ;;AAIA,MAAIC,WAAWF,aAAaC,SAA5B;;AAEA,MAAIC,QAAJ,EAAc;AACZ,QAAIC,QAAQ,uBAAQN,QAAR,CAAZ;AAAA,QACIO,SAAS,CAACD,KAAD,IAAU,wBAASN,QAAT,CADvB;AAAA,QAEIQ,UAAU,CAACF,KAAD,IAAU,CAACC,MAAX,IAAqB,4BAAaP,QAAb,CAFnC;;AAIAG,eAAWH,QAAX;AACA,QAAIM,SAASC,MAAT,IAAmBC,OAAvB,EAAgC;AAC9B,UAAI,uBAAQT,QAAR,CAAJ,EAAuB;AACrBI,mBAAWJ,QAAX;AACD,OAFD,MAGK,IAAI,iCAAkBA,QAAlB,CAAJ,EAAiC;AACpCI,mBAAW,yBAAUJ,QAAV,CAAX;AACD,OAFI,MAGA,IAAIQ,MAAJ,EAAY;AACfF,mBAAW,KAAX;AACAF,mBAAW,2BAAYH,QAAZ,EAAsB,IAAtB,CAAX;AACD,OAHI,MAIA,IAAIQ,OAAJ,EAAa;AAChBH,mBAAW,KAAX;AACAF,mBAAW,+BAAgBH,QAAhB,EAA0B,IAA1B,CAAX;AACD,OAHI,MAIA;AACHG,mBAAW,EAAX;AACD;AACF,KAlBD,MAmBK,IAAI,6BAAcH,QAAd,KAA2B,2BAAYA,QAAZ,CAA/B,EAAsD;AACzDG,iBAAWJ,QAAX;AACA,UAAI,2BAAYA,QAAZ,CAAJ,EAA2B;AACzBI,mBAAW,6BAAcJ,QAAd,CAAX;AACD,OAFD,MAGK,IAAI,CAAC,wBAASA,QAAT,CAAD,IAAwBJ,YAAY,0BAAWI,QAAX,CAAxC,EAA+D;AAClEI,mBAAW,+BAAgBH,QAAhB,CAAX;AACD;AACF,KARI,MASA;AACHK,iBAAW,KAAX;AACD;AACF;AACD,MAAIA,QAAJ,EAAc;AACZ;AACAP,UAAMW,GAAN,CAAUT,QAAV,EAAoBG,QAApB;AACAP,cAAUO,QAAV,EAAoBH,QAApB,EAA8BL,QAA9B,EAAwCE,UAAxC,EAAoDC,KAApD;AACAA,UAAM,QAAN,EAAgBE,QAAhB;AACD;AACD,kCAAiBR,MAAjB,EAAyBE,GAAzB,EAA8BS,QAA9B;AACD;;kBAEcZ,a","file":"vendor/lodash/modularize/_baseMergeDeep.js","sourcesContent":["import assignMergeValue from './_assignMergeValue.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\nimport copyArray from './_copyArray.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport isBuffer from './isBuffer.js';\nimport isFunction from './isFunction.js';\nimport isObject from './isObject.js';\nimport isPlainObject from './isPlainObject.js';\nimport isTypedArray from './isTypedArray.js';\nimport toPlainObject from './toPlainObject.js';\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = object[key],\n      srcValue = source[key],\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nexport default baseMergeDeep;\n"],"sourceRoot":"../../../../../../src/js"}