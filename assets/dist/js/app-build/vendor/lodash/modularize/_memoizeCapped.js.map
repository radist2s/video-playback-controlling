{"version":3,"sources":["vendor/lodash/modularize/_memoizeCapped.js"],"names":["MAX_MEMOIZE_SIZE","memoizeCapped","func","result","key","cache","size","clear"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACA,IAAIA,mBAAmB,GAAvB;;AAEA;;;;;;;;AAQA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAIC,SAAS,uBAAQD,IAAR,EAAc,UAASE,GAAT,EAAc;AACvC,QAAIC,MAAMC,IAAN,KAAeN,gBAAnB,EAAqC;AACnCK,YAAME,KAAN;AACD;AACD,WAAOH,GAAP;AACD,GALY,CAAb;;AAOA,MAAIC,QAAQF,OAAOE,KAAnB;AACA,SAAOF,MAAP;AACD;;kBAEcF,a","file":"vendor/lodash/modularize/_memoizeCapped.js","sourcesContent":["import memoize from './memoize.js';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nexport default memoizeCapped;\n"],"sourceRoot":"../../../../../../src/js"}