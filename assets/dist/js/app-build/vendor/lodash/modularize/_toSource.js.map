{"version":3,"sources":["vendor/lodash/modularize/_toSource.js"],"names":["funcProto","Function","prototype","funcToString","toString","toSource","func","call","e"],"mappings":";;;;;AAAA;AACA,IAAIA,YAAYC,SAASC,SAAzB;;AAEA;AACA,IAAIC,eAAeH,UAAUI,QAA7B;;AAEA;;;;;;;AAOA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAIA,QAAQ,IAAZ,EAAkB;AAChB,QAAI;AACF,aAAOH,aAAaI,IAAb,CAAkBD,IAAlB,CAAP;AACD,KAFD,CAEE,OAAOE,CAAP,EAAU,CAAE;AACd,QAAI;AACF,aAAQF,OAAO,EAAf;AACD,KAFD,CAEE,OAAOE,CAAP,EAAU,CAAE;AACf;AACD,SAAO,EAAP;AACD;;kBAEcH,Q","file":"vendor/lodash/modularize/_toSource.js","sourcesContent":["/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n"],"sourceRoot":"../../../../../../src/js"}