{"version":3,"sources":["vendor/element-dataset.js"],"names":["elementDatasetPolyfill","document","documentElement","dataset","Object","getOwnPropertyDescriptor","HTMLElement","prototype","get","descriptor","enumerable","element","map","attributes","toUpperCase","n0","charAt","getter","value","setter","name","setAttribute","removeAttribute","i","length","attribute","test","propName","substr","replace","defineProperty","bind","set"],"mappings":";;AAAA;;;;AAIA;;AAEA,CAAC,SAASA,sBAAT,GAAkC;AAC/B,QAAIC,SAASC,eAAT,CAAyBC,OAA7B,EAAsC;AAClC,YAAIC,OAAOC,wBAAP,CAAgCC,YAAYC,SAA5C,EAAuD,SAAvD,KAAqEH,OAAOC,wBAAP,CAAgCC,YAAYC,SAA5C,EAAuD,SAAvD,EAAkEC,GAA3I,EAAgJ;AAC5I;AACH;AACJ;;AAED,QAAMC,aAAa,EAAnB;;AAEAA,eAAWC,UAAX,GAAwB,IAAxB;;AAEAD,eAAWD,GAAX,GAAiB,SAASA,GAAT,GAAe;AAC5B,YAAMG,UAAU,IAAhB;AACA,YAAMC,MAAM,EAAZ;AACA,YAAMC,aAAa,KAAKA,UAAxB;;AAEA,iBAASC,WAAT,CAAqBC,EAArB,EAAyB;AACrB,mBAAOA,GAAGC,MAAH,CAAU,CAAV,EAAaF,WAAb,EAAP;AACH;;AAED,iBAASG,MAAT,GAAkB;AACd,mBAAO,KAAKC,KAAZ;AACH;;AAED,iBAASC,MAAT,CAAgBC,IAAhB,EAAsBF,KAAtB,EAA6B;AACzB,gBAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AAC9B,qBAAKG,YAAL,CAAkBD,IAAlB,EAAwBF,KAAxB;AACH,aAFD,MAGK;AACD,qBAAKI,eAAL,CAAqBF,IAArB;AACH;AACJ;;AAED,aAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIV,WAAWW,MAA/B,EAAuCD,KAAK,CAA5C,EAA+C;AAC3C,gBAAME,YAAYZ,WAAWU,CAAX,CAAlB;;AAEA;AACA;;AAEA,gBAAIE,aAAaA,UAAUL,IAAvB,IAAgC,iBAAD,CAAoBM,IAApB,CAAyBD,UAAUL,IAAnC,CAAnC,EAA6E;AACzE,oBAAMA,OAAOK,UAAUL,IAAvB;AACA,oBAAMF,QAAQO,UAAUP,KAAxB;;AAEA;;AAEA,oBAAMS,WAAWP,KAAKQ,MAAL,CAAY,CAAZ,EAAeC,OAAf,CAAuB,KAAvB,EAA8Bf,WAA9B,CAAjB;;AAEAV,uBAAO0B,cAAP,CAAsBlB,GAAtB,EAA2Be,QAA3B,EAAqC;AACjCjB,gCAAYD,WAAWC,UADU;AAEjCF,yBAAKS,OAAOc,IAAP,CAAY,EAACb,OAAOA,SAAS,EAAjB,EAAZ,CAF4B;AAGjCc,yBAAKb,OAAOY,IAAP,CAAYpB,OAAZ,EAAqBS,IAArB;AAH4B,iBAArC;AAKH;AACJ;AACD,eAAOR,GAAP;AACH,KA5CD;;AA8CAR,WAAO0B,cAAP,CAAsBxB,YAAYC,SAAlC,EAA6C,SAA7C,EAAwDE,UAAxD;AACH,CA1DA,EAAD","file":"vendor/element-dataset.js","sourcesContent":["/**\n * https://github.com/discontinued/element-dataset\n */\n\n/* eslint-env browser */\n\n!function elementDatasetPolyfill() {\n    if (document.documentElement.dataset) {\n        if (Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'dataset') && Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'dataset').get) {\n            return\n        }\n    }\n\n    const descriptor = {}\n\n    descriptor.enumerable = true\n\n    descriptor.get = function get() {\n        const element = this\n        const map = {}\n        const attributes = this.attributes\n\n        function toUpperCase(n0) {\n            return n0.charAt(1).toUpperCase()\n        }\n\n        function getter() {\n            return this.value\n        }\n\n        function setter(name, value) {\n            if (typeof value !== 'undefined') {\n                this.setAttribute(name, value)\n            }\n            else {\n                this.removeAttribute(name)\n            }\n        }\n\n        for (let i = 0; i < attributes.length; i += 1) {\n            const attribute = attributes[i]\n\n            // This test really should allow any XML Name without\n            // colons (and non-uppercase for XHTML)\n\n            if (attribute && attribute.name && (/^data-\\w[\\w-]*$/).test(attribute.name)) {\n                const name = attribute.name\n                const value = attribute.value\n\n                // Change to CamelCase\n\n                const propName = name.substr(5).replace(/-./g, toUpperCase)\n\n                Object.defineProperty(map, propName, {\n                    enumerable: descriptor.enumerable,\n                    get: getter.bind({value: value || ''}),\n                    set: setter.bind(element, name)\n                })\n            }\n        }\n        return map\n    }\n\n    Object.defineProperty(HTMLElement.prototype, 'dataset', descriptor)\n}()"],"sourceRoot":"../../../../src/js"}