{"version":3,"sources":["vendor/lodash/modularize/_createPartial.js"],"names":["WRAP_BIND_FLAG","createPartial","func","bitmask","thisArg","partials","isBind","Ctor","wrapper","argsIndex","argsLength","arguments","length","leftIndex","leftLength","args","Array","fn","root"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAIA,iBAAiB,CAArB;;AAEA;;;;;;;;;;;;AAYA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,OAAtC,EAA+CC,QAA/C,EAAyD;AACvD,MAAIC,SAASH,UAAUH,cAAvB;AAAA,MACIO,OAAO,0BAAWL,IAAX,CADX;;AAGA,WAASM,OAAT,GAAmB;AACjB,QAAIC,YAAY,CAAC,CAAjB;AAAA,QACIC,aAAaC,UAAUC,MAD3B;AAAA,QAEIC,YAAY,CAAC,CAFjB;AAAA,QAGIC,aAAaT,SAASO,MAH1B;AAAA,QAIIG,OAAOC,MAAMF,aAAaJ,UAAnB,CAJX;AAAA,QAKIO,KAAM,QAAQ,SAASC,cAAjB,IAAyB,gBAAgBV,OAA1C,GAAqDD,IAArD,GAA4DL,IALrE;;AAOA,WAAO,EAAEW,SAAF,GAAcC,UAArB,EAAiC;AAC/BC,WAAKF,SAAL,IAAkBR,SAASQ,SAAT,CAAlB;AACD;AACD,WAAOH,YAAP,EAAqB;AACnBK,WAAKF,WAAL,IAAoBF,UAAU,EAAEF,SAAZ,CAApB;AACD;AACD,WAAO,qBAAMQ,EAAN,EAAUX,SAASF,OAAT,GAAmB,IAA7B,EAAmCW,IAAnC,CAAP;AACD;AACD,SAAOP,OAAP;AACD;;kBAEcP,a","file":"vendor/lodash/modularize/_createPartial.js","sourcesContent":["import apply from './_apply.js';\nimport createCtor from './_createCtor.js';\nimport root from './_root.js';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` to invoke it with the `this` binding\n * of `thisArg` and `partials` prepended to the arguments it receives.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} partials The arguments to prepend to those provided to\n *  the new function.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createPartial(func, bitmask, thisArg, partials) {\n  var isBind = bitmask & WRAP_BIND_FLAG,\n      Ctor = createCtor(func);\n\n  function wrapper() {\n    var argsIndex = -1,\n        argsLength = arguments.length,\n        leftIndex = -1,\n        leftLength = partials.length,\n        args = Array(leftLength + argsLength),\n        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n    while (++leftIndex < leftLength) {\n      args[leftIndex] = partials[leftIndex];\n    }\n    while (argsLength--) {\n      args[leftIndex++] = arguments[++argsIndex];\n    }\n    return apply(fn, isBind ? thisArg : this, args);\n  }\n  return wrapper;\n}\n\nexport default createPartial;\n"],"sourceRoot":"../../../../../../src/js"}