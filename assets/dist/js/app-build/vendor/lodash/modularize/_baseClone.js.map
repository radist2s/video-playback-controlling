{"version":3,"sources":["vendor/lodash/modularize/_baseClone.js"],"names":["CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","cloneableTags","baseClone","value","bitmask","customizer","key","object","stack","result","isDeep","isFlat","isFull","undefined","isArr","tag","isFunc","Stack","stacked","get","set","keysFunc","getAllKeysIn","getAllKeys","keysIn","keys","props","subValue"],"mappings":"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","file":"vendor/lodash/modularize/_baseClone.js","sourcesContent":["import Stack from './_Stack.js';\nimport arrayEach from './_arrayEach.js';\nimport assignValue from './_assignValue.js';\nimport baseAssign from './_baseAssign.js';\nimport baseAssignIn from './_baseAssignIn.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport copyArray from './_copyArray.js';\nimport copySymbols from './_copySymbols.js';\nimport copySymbolsIn from './_copySymbolsIn.js';\nimport getAllKeys from './_getAllKeys.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\nimport getTag from './_getTag.js';\nimport initCloneArray from './_initCloneArray.js';\nimport initCloneByTag from './_initCloneByTag.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isObject from './isObject.js';\nimport keys from './keys.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n"],"sourceRoot":"../../../../../../src/js"}