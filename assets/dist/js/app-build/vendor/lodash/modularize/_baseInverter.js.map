{"version":3,"sources":["vendor/lodash/modularize/_baseInverter.js"],"names":["baseInverter","object","setter","iteratee","accumulator","value","key"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;;;;;;;;AAWA,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,MAA9B,EAAsCC,QAAtC,EAAgDC,WAAhD,EAA6D;AAC3D,4BAAWH,MAAX,EAAmB,UAASI,KAAT,EAAgBC,GAAhB,EAAqBL,MAArB,EAA6B;AAC9CC,WAAOE,WAAP,EAAoBD,SAASE,KAAT,CAApB,EAAqCC,GAArC,EAA0CL,MAA1C;AACD,GAFD;AAGA,SAAOG,WAAP;AACD;;kBAEcJ,Y","file":"vendor/lodash/modularize/_baseInverter.js","sourcesContent":["import baseForOwn from './_baseForOwn.js';\n\n/**\n * The base implementation of `_.invert` and `_.invertBy` which inverts\n * `object` with values transformed by `iteratee` and set by `setter`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform values.\n * @param {Object} accumulator The initial inverted object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseInverter(object, setter, iteratee, accumulator) {\n  baseForOwn(object, function(value, key, object) {\n    setter(accumulator, iteratee(value), key, object);\n  });\n  return accumulator;\n}\n\nexport default baseInverter;\n"],"sourceRoot":"../../../../../../src/js"}