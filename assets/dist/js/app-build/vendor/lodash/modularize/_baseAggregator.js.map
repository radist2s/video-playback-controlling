{"version":3,"sources":["vendor/lodash/modularize/_baseAggregator.js"],"names":["baseAggregator","collection","setter","iteratee","accumulator","value","key"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;;;;;;;;AAWA,SAASA,cAAT,CAAwBC,UAAxB,EAAoCC,MAApC,EAA4CC,QAA5C,EAAsDC,WAAtD,EAAmE;AACjE,0BAASH,UAAT,EAAqB,UAASI,KAAT,EAAgBC,GAAhB,EAAqBL,UAArB,EAAiC;AACpDC,WAAOE,WAAP,EAAoBC,KAApB,EAA2BF,SAASE,KAAT,CAA3B,EAA4CJ,UAA5C;AACD,GAFD;AAGA,SAAOG,WAAP;AACD;;kBAEcJ,c","file":"vendor/lodash/modularize/_baseAggregator.js","sourcesContent":["import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n"],"sourceRoot":"../../../../../../src/js"}