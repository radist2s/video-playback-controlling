{"version":3,"sources":["vendor/lodash/modularize/_isFlattenable.js"],"names":["spreadableSymbol","Symbol","isConcatSpreadable","undefined","isFlattenable","value"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAIA,mBAAmBC,mBAASA,iBAAOC,kBAAhB,GAAqCC,SAA5D;;AAEA;;;;;;;AAOA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,SAAO,uBAAQA,KAAR,KAAkB,2BAAYA,KAAZ,CAAlB,IACL,CAAC,EAAEL,oBAAoBK,KAApB,IAA6BA,MAAML,gBAAN,CAA/B,CADH;AAED;;kBAEcI,a","file":"vendor/lodash/modularize/_isFlattenable.js","sourcesContent":["import Symbol from './_Symbol.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nexport default isFlattenable;\n"],"sourceRoot":"../../../../../../src/js"}