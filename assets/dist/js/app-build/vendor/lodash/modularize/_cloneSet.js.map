{"version":3,"sources":["vendor/lodash/modularize/_cloneSet.js"],"names":["CLONE_DEEP_FLAG","cloneSet","set","isDeep","cloneFunc","array","addSetEntry","constructor"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAIA,kBAAkB,CAAtB;;AAEA;;;;;;;;;AASA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,MAAvB,EAA+BC,SAA/B,EAA0C;AACxC,MAAIC,QAAQF,SAASC,UAAU,0BAAWF,GAAX,CAAV,EAA2BF,eAA3B,CAAT,GAAuD,0BAAWE,GAAX,CAAnE;AACA,SAAO,2BAAYG,KAAZ,EAAmBC,qBAAnB,EAAgC,IAAIJ,IAAIK,WAAR,EAAhC,CAAP;AACD;;kBAEcN,Q","file":"vendor/lodash/modularize/_cloneSet.js","sourcesContent":["import addSetEntry from './_addSetEntry.js';\nimport arrayReduce from './_arrayReduce.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1;\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\nexport default cloneSet;\n"],"sourceRoot":"../../../../../../src/js"}