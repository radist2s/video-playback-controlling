{"version":3,"sources":["vendor/lodash/modularize/_createBind.js"],"names":["WRAP_BIND_FLAG","createBind","func","bitmask","thisArg","isBind","Ctor","wrapper","fn","root","apply","arguments"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA;AACA,IAAIA,iBAAiB,CAArB;;AAEA;;;;;;;;;;AAUA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,OAAnC,EAA4C;AAC1C,MAAIC,SAASF,UAAUH,cAAvB;AAAA,MACIM,OAAO,0BAAWJ,IAAX,CADX;;AAGA,WAASK,OAAT,GAAmB;AACjB,QAAIC,KAAM,QAAQ,SAASC,cAAjB,IAAyB,gBAAgBF,OAA1C,GAAqDD,IAArD,GAA4DJ,IAArE;AACA,WAAOM,GAAGE,KAAH,CAASL,SAASD,OAAT,GAAmB,IAA5B,EAAkCO,SAAlC,CAAP;AACD;AACD,SAAOJ,OAAP;AACD;;kBAEcN,U","file":"vendor/lodash/modularize/_createBind.js","sourcesContent":["import createCtor from './_createCtor.js';\nimport root from './_root.js';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` to invoke it with the optional `this`\n * binding of `thisArg`.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createBind(func, bitmask, thisArg) {\n  var isBind = bitmask & WRAP_BIND_FLAG,\n      Ctor = createCtor(func);\n\n  function wrapper() {\n    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n    return fn.apply(isBind ? thisArg : this, arguments);\n  }\n  return wrapper;\n}\n\nexport default createBind;\n"],"sourceRoot":"../../../../../../src/js"}