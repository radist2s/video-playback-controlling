{"version":3,"sources":["vendor/lodash/modularize/transform.js"],"names":["transform","object","iteratee","accumulator","isArr","isArrLike","Ctor","constructor","arrayEach","baseForOwn","value","index"],"mappings":";;;;;;AAQA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnBA;;;;;;;;AAiDA,SAASA,SAAT,CAAmBC,MAAnB,EAA2BC,QAA3B,EAAqCC,WAArC,EAAkD;AAChD,MAAIC,QAAQ,uBAAQH,MAAR,CAAZ;AAAA,MACII,YAAYD,SAAS,wBAASH,MAAT,CAAT,IAA6B,4BAAaA,MAAb,CAD7C;;AAGAC,aAAW,4BAAaA,QAAb,EAAuB,CAAvB,CAAX;AACA,MAAIC,eAAe,IAAnB,EAAyB;AACvB,QAAIG,OAAOL,UAAUA,OAAOM,WAA5B;AACA,QAAIF,SAAJ,EAAe;AACbF,oBAAcC,QAAQ,IAAIE,IAAJ,EAAR,GAAmB,EAAjC;AACD,KAFD,MAGK,IAAI,wBAASL,MAAT,CAAJ,EAAsB;AACzBE,oBAAc,0BAAWG,IAAX,IAAmB,0BAAW,4BAAaL,MAAb,CAAX,CAAnB,GAAsD,EAApE;AACD,KAFI,MAGA;AACHE,oBAAc,EAAd;AACD;AACF;AACD,GAACE,YAAYG,mBAAZ,GAAwBC,oBAAzB,EAAqCR,MAArC,EAA6C,UAASS,KAAT,EAAgBC,KAAhB,EAAuBV,MAAvB,EAA+B;AAC1E,WAAOC,SAASC,WAAT,EAAsBO,KAAtB,EAA6BC,KAA7B,EAAoCV,MAApC,CAAP;AACD,GAFD;AAGA,SAAOE,WAAP;AACD;;kBAEcH,S","file":"vendor/lodash/modularize/transform.js","sourcesContent":["/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash category=\"collection,function,date,lang,object,string\" include=\"uniqueId\" modularize exports=\"es\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\nimport arrayEach from './_arrayEach.js';\nimport baseCreate from './_baseCreate.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\nimport getPrototype from './_getPrototype.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isFunction from './isFunction.js';\nimport isObject from './isObject.js';\nimport isTypedArray from './isTypedArray.js';\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nexport default transform;\n"],"sourceRoot":"../../../../../../src/js"}