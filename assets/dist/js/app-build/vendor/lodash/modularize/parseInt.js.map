{"version":3,"sources":["vendor/lodash/modularize/parseInt.js"],"names":["reTrimStart","nativeParseInt","root","parseInt","string","radix","guard","replace"],"mappings":";;;;;;AAQA;;;;AACA;;;;;;AAEA;AAXA;;;;;;;;AAYA,IAAIA,cAAc,MAAlB;;AAEA;AACA,IAAIC,iBAAiBC,eAAKC,QAA1B;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAASA,QAAT,CAAkBC,MAAlB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwC;AACtC,MAAIA,SAASD,SAAS,IAAtB,EAA4B;AAC1BA,YAAQ,CAAR;AACD,GAFD,MAEO,IAAIA,KAAJ,EAAW;AAChBA,YAAQ,CAACA,KAAT;AACD;AACD,SAAOJ,eAAe,wBAASG,MAAT,EAAiBG,OAAjB,CAAyBP,WAAzB,EAAsC,EAAtC,CAAf,EAA0DK,SAAS,CAAnE,CAAP;AACD;;kBAEcF,Q","file":"vendor/lodash/modularize/parseInt.js","sourcesContent":["/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash category=\"collection,function,date,lang,object,string\" include=\"uniqueId\" modularize exports=\"es\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\nimport root from './_root.js';\nimport toString from './toString.js';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeParseInt = root.parseInt;\n\n/**\n * Converts `string` to an integer of the specified radix. If `radix` is\n * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n * hexadecimal, in which case a `radix` of `16` is used.\n *\n * **Note:** This method aligns with the\n * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category String\n * @param {string} string The string to convert.\n * @param {number} [radix=10] The radix to interpret `value` by.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.parseInt('08');\n * // => 8\n *\n * _.map(['6', '08', '10'], _.parseInt);\n * // => [6, 8, 10]\n */\nfunction parseInt(string, radix, guard) {\n  if (guard || radix == null) {\n    radix = 0;\n  } else if (radix) {\n    radix = +radix;\n  }\n  return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n}\n\nexport default parseInt;\n"],"sourceRoot":"../../../../../../src/js"}