{"version":3,"sources":["vendor/lodash/modularize/trim.js"],"names":["reTrim","trim","string","chars","guard","undefined","replace","strSymbols","chrSymbols","start","end","join"],"mappings":";;;;;;AAQA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AAfA;;;;;;;;AAgBA,IAAIA,SAAS,YAAb;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAASC,IAAT,CAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,KAA7B,EAAoC;AAClCF,WAAS,wBAASA,MAAT,CAAT;AACA,MAAIA,WAAWE,SAASD,UAAUE,SAA9B,CAAJ,EAA8C;AAC5C,WAAOH,OAAOI,OAAP,CAAeN,MAAf,EAAuB,EAAvB,CAAP;AACD;AACD,MAAI,CAACE,MAAD,IAAW,EAAEC,QAAQ,4BAAaA,KAAb,CAAV,CAAf,EAA+C;AAC7C,WAAOD,MAAP;AACD;AACD,MAAIK,aAAa,6BAAcL,MAAd,CAAjB;AAAA,MACIM,aAAa,6BAAcL,KAAd,CADjB;AAAA,MAEIM,QAAQ,+BAAgBF,UAAhB,EAA4BC,UAA5B,CAFZ;AAAA,MAGIE,MAAM,6BAAcH,UAAd,EAA0BC,UAA1B,IAAwC,CAHlD;;AAKA,SAAO,yBAAUD,UAAV,EAAsBE,KAAtB,EAA6BC,GAA7B,EAAkCC,IAAlC,CAAuC,EAAvC,CAAP;AACD;;kBAEcV,I","file":"vendor/lodash/modularize/trim.js","sourcesContent":["/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash category=\"collection,function,date,lang,object,string\" include=\"uniqueId\" modularize exports=\"es\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\nimport baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport charsEndIndex from './_charsEndIndex.js';\nimport charsStartIndex from './_charsStartIndex.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrim, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nexport default trim;\n"],"sourceRoot":"../../../../../../src/js"}